/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package api;
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2024-05-14")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class m2r {

  /**
   * Master -> Region
   * Operations:
   *  CREATE  := create table
   *  DROP    := drop table
   *  RECOVER := recover data from somewhere
   *  UPGRADE := become master from slave
   * 
   */
  public interface Iface {

    public void create(String table, String sql, java.util.List<String> region_addrs, int aid) throws org.apache.thrift.TException;

    public void drop(String table, int aid) throws org.apache.thrift.TException;

    public void recover(String table, java.util.List<String> region_addrs, int aid) throws org.apache.thrift.TException;

    public void upgrade(String table, java.util.List<String> slave_addrs, int aid) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void create(String table, String sql, java.util.List<String> region_addrs, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void drop(String table, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void recover(String table, java.util.List<String> region_addrs, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void upgrade(String table, java.util.List<String> slave_addrs, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public void create(String table, String sql, java.util.List<String> region_addrs, int aid) throws org.apache.thrift.TException
    {
      send_create(table, sql, region_addrs, aid);
    }

    public void send_create(String table, String sql, java.util.List<String> region_addrs, int aid) throws org.apache.thrift.TException
    {
      create_args args = new create_args();
      args.setTable(table);
      args.setSql(sql);
      args.setRegion_addrs(region_addrs);
      args.setAid(aid);
      sendBaseOneway("create", args);
    }

    @Override
    public void drop(String table, int aid) throws org.apache.thrift.TException
    {
      send_drop(table, aid);
    }

    public void send_drop(String table, int aid) throws org.apache.thrift.TException
    {
      drop_args args = new drop_args();
      args.setTable(table);
      args.setAid(aid);
      sendBaseOneway("drop", args);
    }

    @Override
    public void recover(String table, java.util.List<String> region_addrs, int aid) throws org.apache.thrift.TException
    {
      send_recover(table, region_addrs, aid);
    }

    public void send_recover(String table, java.util.List<String> region_addrs, int aid) throws org.apache.thrift.TException
    {
      recover_args args = new recover_args();
      args.setTable(table);
      args.setRegion_addrs(region_addrs);
      args.setAid(aid);
      sendBaseOneway("recover", args);
    }

    @Override
    public void upgrade(String table, java.util.List<String> slave_addrs, int aid) throws org.apache.thrift.TException
    {
      send_upgrade(table, slave_addrs, aid);
    }

    public void send_upgrade(String table, java.util.List<String> slave_addrs, int aid) throws org.apache.thrift.TException
    {
      upgrade_args args = new upgrade_args();
      args.setTable(table);
      args.setSlave_addrs(slave_addrs);
      args.setAid(aid);
      sendBaseOneway("upgrade", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void create(String table, String sql, java.util.List<String> region_addrs, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_call method_call = new create_call(table, sql, region_addrs, aid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String table;
      private String sql;
      private java.util.List<String> region_addrs;
      private int aid;
      public create_call(String table, String sql, java.util.List<String> region_addrs, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.table = table;
        this.sql = sql;
        this.region_addrs = region_addrs;
        this.aid = aid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        create_args args = new create_args();
        args.setTable(table);
        args.setSql(sql);
        args.setRegion_addrs(region_addrs);
        args.setAid(aid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void drop(String table, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      drop_call method_call = new drop_call(table, aid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class drop_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String table;
      private int aid;
      public drop_call(String table, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.table = table;
        this.aid = aid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("drop", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        drop_args args = new drop_args();
        args.setTable(table);
        args.setAid(aid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void recover(String table, java.util.List<String> region_addrs, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recover_call method_call = new recover_call(table, region_addrs, aid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recover_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String table;
      private java.util.List<String> region_addrs;
      private int aid;
      public recover_call(String table, java.util.List<String> region_addrs, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.table = table;
        this.region_addrs = region_addrs;
        this.aid = aid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recover", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        recover_args args = new recover_args();
        args.setTable(table);
        args.setRegion_addrs(region_addrs);
        args.setAid(aid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void upgrade(String table, java.util.List<String> slave_addrs, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      upgrade_call method_call = new upgrade_call(table, slave_addrs, aid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class upgrade_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String table;
      private java.util.List<String> slave_addrs;
      private int aid;
      public upgrade_call(String table, java.util.List<String> slave_addrs, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.table = table;
        this.slave_addrs = slave_addrs;
        this.aid = aid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("upgrade", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        upgrade_args args = new upgrade_args();
        args.setTable(table);
        args.setSlave_addrs(slave_addrs);
        args.setAid(aid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("create", new create());
      processMap.put("drop", new drop());
      processMap.put("recover", new recover());
      processMap.put("upgrade", new upgrade());
      return processMap;
    }

    public static class create<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_args> {
      public create() {
        super("create");
      }

      @Override
      public create_args getEmptyArgsInstance() {
        return new create_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, create_args args) throws org.apache.thrift.TException {
        iface.create(args.table, args.sql, args.region_addrs, args.aid);
        return null;
      }
    }

    public static class drop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, drop_args> {
      public drop() {
        super("drop");
      }

      @Override
      public drop_args getEmptyArgsInstance() {
        return new drop_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, drop_args args) throws org.apache.thrift.TException {
        iface.drop(args.table, args.aid);
        return null;
      }
    }

    public static class recover<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recover_args> {
      public recover() {
        super("recover");
      }

      @Override
      public recover_args getEmptyArgsInstance() {
        return new recover_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, recover_args args) throws org.apache.thrift.TException {
        iface.recover(args.table, args.region_addrs, args.aid);
        return null;
      }
    }

    public static class upgrade<I extends Iface> extends org.apache.thrift.ProcessFunction<I, upgrade_args> {
      public upgrade() {
        super("upgrade");
      }

      @Override
      public upgrade_args getEmptyArgsInstance() {
        return new upgrade_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, upgrade_args args) throws org.apache.thrift.TException {
        iface.upgrade(args.table, args.slave_addrs, args.aid);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("create", new create());
      processMap.put("drop", new drop());
      processMap.put("recover", new recover());
      processMap.put("upgrade", new upgrade());
      return processMap;
    }

    public static class create<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, create_args, Void> {
      public create() {
        super("create");
      }

      @Override
      public create_args getEmptyArgsInstance() {
        return new create_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, create_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.create(args.table, args.sql, args.region_addrs, args.aid,resultHandler);
      }
    }

    public static class drop<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, drop_args, Void> {
      public drop() {
        super("drop");
      }

      @Override
      public drop_args getEmptyArgsInstance() {
        return new drop_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, drop_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.drop(args.table, args.aid,resultHandler);
      }
    }

    public static class recover<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recover_args, Void> {
      public recover() {
        super("recover");
      }

      @Override
      public recover_args getEmptyArgsInstance() {
        return new recover_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, recover_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.recover(args.table, args.region_addrs, args.aid,resultHandler);
      }
    }

    public static class upgrade<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, upgrade_args, Void> {
      public upgrade() {
        super("upgrade");
      }

      @Override
      public upgrade_args getEmptyArgsInstance() {
        return new upgrade_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, upgrade_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.upgrade(args.table, args.slave_addrs, args.aid,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class create_args implements org.apache.thrift.TBase<create_args, create_args._Fields>, java.io.Serializable, Cloneable, Comparable<create_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_args");

    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField REGION_ADDRS_FIELD_DESC = new org.apache.thrift.protocol.TField("region_addrs", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField AID_FIELD_DESC = new org.apache.thrift.protocol.TField("aid", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new create_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new create_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String table; // required
    public @org.apache.thrift.annotation.Nullable String sql; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<String> region_addrs; // required
    public int aid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TABLE((short)1, "table"),
      SQL((short)2, "sql"),
      REGION_ADDRS((short)3, "region_addrs"),
      AID((short)4, "aid");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // SQL
            return SQL;
          case 3: // REGION_ADDRS
            return REGION_ADDRS;
          case 4: // AID
            return AID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REGION_ADDRS, new org.apache.thrift.meta_data.FieldMetaData("region_addrs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.AID, new org.apache.thrift.meta_data.FieldMetaData("aid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_args.class, metaDataMap);
    }

    public create_args() {
    }

    public create_args(
      String table,
      String sql,
      java.util.List<String> region_addrs,
      int aid)
    {
      this();
      this.table = table;
      this.sql = sql;
      this.region_addrs = region_addrs;
      this.aid = aid;
      setAidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_args(create_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
      if (other.isSetRegion_addrs()) {
        java.util.List<String> __this__region_addrs = new java.util.ArrayList<String>(other.region_addrs);
        this.region_addrs = __this__region_addrs;
      }
      this.aid = other.aid;
    }

    @Override
    public create_args deepCopy() {
      return new create_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.sql = null;
      this.region_addrs = null;
      setAidIsSet(false);
      this.aid = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public String getTable() {
      return this.table;
    }

    public create_args setTable(@org.apache.thrift.annotation.Nullable String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getSql() {
      return this.sql;
    }

    public create_args setSql(@org.apache.thrift.annotation.Nullable String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public int getRegion_addrsSize() {
      return (this.region_addrs == null) ? 0 : this.region_addrs.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<String> getRegion_addrsIterator() {
      return (this.region_addrs == null) ? null : this.region_addrs.iterator();
    }

    public void addToRegion_addrs(String elem) {
      if (this.region_addrs == null) {
        this.region_addrs = new java.util.ArrayList<String>();
      }
      this.region_addrs.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<String> getRegion_addrs() {
      return this.region_addrs;
    }

    public create_args setRegion_addrs(@org.apache.thrift.annotation.Nullable java.util.List<String> region_addrs) {
      this.region_addrs = region_addrs;
      return this;
    }

    public void unsetRegion_addrs() {
      this.region_addrs = null;
    }

    /** Returns true if field region_addrs is set (has been assigned a value) and false otherwise */
    public boolean isSetRegion_addrs() {
      return this.region_addrs != null;
    }

    public void setRegion_addrsIsSet(boolean value) {
      if (!value) {
        this.region_addrs = null;
      }
    }

    public int getAid() {
      return this.aid;
    }

    public create_args setAid(int aid) {
      this.aid = aid;
      setAidIsSet(true);
      return this;
    }

    public void unsetAid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AID_ISSET_ID);
    }

    /** Returns true if field aid is set (has been assigned a value) and false otherwise */
    public boolean isSetAid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AID_ISSET_ID);
    }

    public void setAidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((String)value);
        }
        break;

      case REGION_ADDRS:
        if (value == null) {
          unsetRegion_addrs();
        } else {
          setRegion_addrs((java.util.List<String>)value);
        }
        break;

      case AID:
        if (value == null) {
          unsetAid();
        } else {
          setAid((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case SQL:
        return getSql();

      case REGION_ADDRS:
        return getRegion_addrs();

      case AID:
        return getAid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case SQL:
        return isSetSql();
      case REGION_ADDRS:
        return isSetRegion_addrs();
      case AID:
        return isSetAid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof create_args)
        return this.equals((create_args)that);
      return false;
    }

    public boolean equals(create_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_region_addrs = true && this.isSetRegion_addrs();
      boolean that_present_region_addrs = true && that.isSetRegion_addrs();
      if (this_present_region_addrs || that_present_region_addrs) {
        if (!(this_present_region_addrs && that_present_region_addrs))
          return false;
        if (!this.region_addrs.equals(that.region_addrs))
          return false;
      }

      boolean this_present_aid = true;
      boolean that_present_aid = true;
      if (this_present_aid || that_present_aid) {
        if (!(this_present_aid && that_present_aid))
          return false;
        if (this.aid != that.aid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetSql()) ? 131071 : 524287);
      if (isSetSql())
        hashCode = hashCode * 8191 + sql.hashCode();

      hashCode = hashCode * 8191 + ((isSetRegion_addrs()) ? 131071 : 524287);
      if (isSetRegion_addrs())
        hashCode = hashCode * 8191 + region_addrs.hashCode();

      hashCode = hashCode * 8191 + aid;

      return hashCode;
    }

    @Override
    public int compareTo(create_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetTable(), other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetSql(), other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetRegion_addrs(), other.isSetRegion_addrs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegion_addrs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region_addrs, other.region_addrs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetAid(), other.isSetAid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aid, other.aid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("region_addrs:");
      if (this.region_addrs == null) {
        sb.append("null");
      } else {
        sb.append(this.region_addrs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aid:");
      sb.append(this.aid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public create_argsStandardScheme getScheme() {
        return new create_argsStandardScheme();
      }
    }

    private static class create_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<create_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REGION_ADDRS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.region_addrs = new java.util.ArrayList<String>(_list0.size);
                  @org.apache.thrift.annotation.Nullable String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.region_addrs.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setRegion_addrsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // AID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.aid = iprot.readI32();
                struct.setAidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, create_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        if (struct.region_addrs != null) {
          oprot.writeFieldBegin(REGION_ADDRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.region_addrs.size()));
            for (String _iter3 : struct.region_addrs)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AID_FIELD_DESC);
        oprot.writeI32(struct.aid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public create_argsTupleScheme getScheme() {
        return new create_argsTupleScheme();
      }
    }

    private static class create_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<create_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetSql()) {
          optionals.set(1);
        }
        if (struct.isSetRegion_addrs()) {
          optionals.set(2);
        }
        if (struct.isSetAid()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetSql()) {
          oprot.writeString(struct.sql);
        }
        if (struct.isSetRegion_addrs()) {
          {
            oprot.writeI32(struct.region_addrs.size());
            for (String _iter4 : struct.region_addrs)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetAid()) {
          oprot.writeI32(struct.aid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sql = iprot.readString();
          struct.setSqlIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.region_addrs = new java.util.ArrayList<String>(_list5.size);
            @org.apache.thrift.annotation.Nullable String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.region_addrs.add(_elem6);
            }
          }
          struct.setRegion_addrsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.aid = iprot.readI32();
          struct.setAidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class drop_args implements org.apache.thrift.TBase<drop_args, drop_args._Fields>, java.io.Serializable, Cloneable, Comparable<drop_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("drop_args");

    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AID_FIELD_DESC = new org.apache.thrift.protocol.TField("aid", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new drop_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new drop_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String table; // required
    public int aid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TABLE((short)1, "table"),
      AID((short)2, "aid");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // AID
            return AID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AID, new org.apache.thrift.meta_data.FieldMetaData("aid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(drop_args.class, metaDataMap);
    }

    public drop_args() {
    }

    public drop_args(
      String table,
      int aid)
    {
      this();
      this.table = table;
      this.aid = aid;
      setAidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_args(drop_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      this.aid = other.aid;
    }

    @Override
    public drop_args deepCopy() {
      return new drop_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      setAidIsSet(false);
      this.aid = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public String getTable() {
      return this.table;
    }

    public drop_args setTable(@org.apache.thrift.annotation.Nullable String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public int getAid() {
      return this.aid;
    }

    public drop_args setAid(int aid) {
      this.aid = aid;
      setAidIsSet(true);
      return this;
    }

    public void unsetAid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AID_ISSET_ID);
    }

    /** Returns true if field aid is set (has been assigned a value) and false otherwise */
    public boolean isSetAid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AID_ISSET_ID);
    }

    public void setAidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case AID:
        if (value == null) {
          unsetAid();
        } else {
          setAid((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case AID:
        return getAid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case AID:
        return isSetAid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof drop_args)
        return this.equals((drop_args)that);
      return false;
    }

    public boolean equals(drop_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_aid = true;
      boolean that_present_aid = true;
      if (this_present_aid || that_present_aid) {
        if (!(this_present_aid && that_present_aid))
          return false;
        if (this.aid != that.aid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + aid;

      return hashCode;
    }

    @Override
    public int compareTo(drop_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetTable(), other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetAid(), other.isSetAid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aid, other.aid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aid:");
      sb.append(this.aid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class drop_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public drop_argsStandardScheme getScheme() {
        return new drop_argsStandardScheme();
      }
    }

    private static class drop_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<drop_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, drop_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.aid = iprot.readI32();
                struct.setAidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, drop_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AID_FIELD_DESC);
        oprot.writeI32(struct.aid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class drop_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public drop_argsTupleScheme getScheme() {
        return new drop_argsTupleScheme();
      }
    }

    private static class drop_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<drop_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, drop_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetAid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetAid()) {
          oprot.writeI32(struct.aid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, drop_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aid = iprot.readI32();
          struct.setAidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class recover_args implements org.apache.thrift.TBase<recover_args, recover_args._Fields>, java.io.Serializable, Cloneable, Comparable<recover_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recover_args");

    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_ADDRS_FIELD_DESC = new org.apache.thrift.protocol.TField("region_addrs", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField AID_FIELD_DESC = new org.apache.thrift.protocol.TField("aid", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recover_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recover_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String table; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<String> region_addrs; // required
    public int aid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TABLE((short)1, "table"),
      REGION_ADDRS((short)2, "region_addrs"),
      AID((short)3, "aid");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // REGION_ADDRS
            return REGION_ADDRS;
          case 3: // AID
            return AID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REGION_ADDRS, new org.apache.thrift.meta_data.FieldMetaData("region_addrs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.AID, new org.apache.thrift.meta_data.FieldMetaData("aid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recover_args.class, metaDataMap);
    }

    public recover_args() {
    }

    public recover_args(
      String table,
      java.util.List<String> region_addrs,
      int aid)
    {
      this();
      this.table = table;
      this.region_addrs = region_addrs;
      this.aid = aid;
      setAidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recover_args(recover_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetRegion_addrs()) {
        java.util.List<String> __this__region_addrs = new java.util.ArrayList<String>(other.region_addrs);
        this.region_addrs = __this__region_addrs;
      }
      this.aid = other.aid;
    }

    @Override
    public recover_args deepCopy() {
      return new recover_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.region_addrs = null;
      setAidIsSet(false);
      this.aid = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public String getTable() {
      return this.table;
    }

    public recover_args setTable(@org.apache.thrift.annotation.Nullable String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public int getRegion_addrsSize() {
      return (this.region_addrs == null) ? 0 : this.region_addrs.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<String> getRegion_addrsIterator() {
      return (this.region_addrs == null) ? null : this.region_addrs.iterator();
    }

    public void addToRegion_addrs(String elem) {
      if (this.region_addrs == null) {
        this.region_addrs = new java.util.ArrayList<String>();
      }
      this.region_addrs.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<String> getRegion_addrs() {
      return this.region_addrs;
    }

    public recover_args setRegion_addrs(@org.apache.thrift.annotation.Nullable java.util.List<String> region_addrs) {
      this.region_addrs = region_addrs;
      return this;
    }

    public void unsetRegion_addrs() {
      this.region_addrs = null;
    }

    /** Returns true if field region_addrs is set (has been assigned a value) and false otherwise */
    public boolean isSetRegion_addrs() {
      return this.region_addrs != null;
    }

    public void setRegion_addrsIsSet(boolean value) {
      if (!value) {
        this.region_addrs = null;
      }
    }

    public int getAid() {
      return this.aid;
    }

    public recover_args setAid(int aid) {
      this.aid = aid;
      setAidIsSet(true);
      return this;
    }

    public void unsetAid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AID_ISSET_ID);
    }

    /** Returns true if field aid is set (has been assigned a value) and false otherwise */
    public boolean isSetAid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AID_ISSET_ID);
    }

    public void setAidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case REGION_ADDRS:
        if (value == null) {
          unsetRegion_addrs();
        } else {
          setRegion_addrs((java.util.List<String>)value);
        }
        break;

      case AID:
        if (value == null) {
          unsetAid();
        } else {
          setAid((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case REGION_ADDRS:
        return getRegion_addrs();

      case AID:
        return getAid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case REGION_ADDRS:
        return isSetRegion_addrs();
      case AID:
        return isSetAid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof recover_args)
        return this.equals((recover_args)that);
      return false;
    }

    public boolean equals(recover_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_region_addrs = true && this.isSetRegion_addrs();
      boolean that_present_region_addrs = true && that.isSetRegion_addrs();
      if (this_present_region_addrs || that_present_region_addrs) {
        if (!(this_present_region_addrs && that_present_region_addrs))
          return false;
        if (!this.region_addrs.equals(that.region_addrs))
          return false;
      }

      boolean this_present_aid = true;
      boolean that_present_aid = true;
      if (this_present_aid || that_present_aid) {
        if (!(this_present_aid && that_present_aid))
          return false;
        if (this.aid != that.aid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetRegion_addrs()) ? 131071 : 524287);
      if (isSetRegion_addrs())
        hashCode = hashCode * 8191 + region_addrs.hashCode();

      hashCode = hashCode * 8191 + aid;

      return hashCode;
    }

    @Override
    public int compareTo(recover_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetTable(), other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetRegion_addrs(), other.isSetRegion_addrs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegion_addrs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region_addrs, other.region_addrs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetAid(), other.isSetAid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aid, other.aid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recover_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("region_addrs:");
      if (this.region_addrs == null) {
        sb.append("null");
      } else {
        sb.append(this.region_addrs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aid:");
      sb.append(this.aid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recover_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public recover_argsStandardScheme getScheme() {
        return new recover_argsStandardScheme();
      }
    }

    private static class recover_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<recover_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, recover_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_ADDRS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.region_addrs = new java.util.ArrayList<String>(_list8.size);
                  @org.apache.thrift.annotation.Nullable String _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readString();
                    struct.region_addrs.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setRegion_addrsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.aid = iprot.readI32();
                struct.setAidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, recover_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.region_addrs != null) {
          oprot.writeFieldBegin(REGION_ADDRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.region_addrs.size()));
            for (String _iter11 : struct.region_addrs)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AID_FIELD_DESC);
        oprot.writeI32(struct.aid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recover_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public recover_argsTupleScheme getScheme() {
        return new recover_argsTupleScheme();
      }
    }

    private static class recover_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<recover_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recover_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetRegion_addrs()) {
          optionals.set(1);
        }
        if (struct.isSetAid()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetRegion_addrs()) {
          {
            oprot.writeI32(struct.region_addrs.size());
            for (String _iter12 : struct.region_addrs)
            {
              oprot.writeString(_iter12);
            }
          }
        }
        if (struct.isSetAid()) {
          oprot.writeI32(struct.aid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recover_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.region_addrs = new java.util.ArrayList<String>(_list13.size);
            @org.apache.thrift.annotation.Nullable String _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readString();
              struct.region_addrs.add(_elem14);
            }
          }
          struct.setRegion_addrsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.aid = iprot.readI32();
          struct.setAidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class upgrade_args implements org.apache.thrift.TBase<upgrade_args, upgrade_args._Fields>, java.io.Serializable, Cloneable, Comparable<upgrade_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("upgrade_args");

    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SLAVE_ADDRS_FIELD_DESC = new org.apache.thrift.protocol.TField("slave_addrs", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField AID_FIELD_DESC = new org.apache.thrift.protocol.TField("aid", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new upgrade_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new upgrade_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String table; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<String> slave_addrs; // required
    public int aid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TABLE((short)1, "table"),
      SLAVE_ADDRS((short)2, "slave_addrs"),
      AID((short)3, "aid");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // SLAVE_ADDRS
            return SLAVE_ADDRS;
          case 3: // AID
            return AID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SLAVE_ADDRS, new org.apache.thrift.meta_data.FieldMetaData("slave_addrs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.AID, new org.apache.thrift.meta_data.FieldMetaData("aid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upgrade_args.class, metaDataMap);
    }

    public upgrade_args() {
    }

    public upgrade_args(
      String table,
      java.util.List<String> slave_addrs,
      int aid)
    {
      this();
      this.table = table;
      this.slave_addrs = slave_addrs;
      this.aid = aid;
      setAidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public upgrade_args(upgrade_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetSlave_addrs()) {
        java.util.List<String> __this__slave_addrs = new java.util.ArrayList<String>(other.slave_addrs);
        this.slave_addrs = __this__slave_addrs;
      }
      this.aid = other.aid;
    }

    @Override
    public upgrade_args deepCopy() {
      return new upgrade_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.slave_addrs = null;
      setAidIsSet(false);
      this.aid = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public String getTable() {
      return this.table;
    }

    public upgrade_args setTable(@org.apache.thrift.annotation.Nullable String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public int getSlave_addrsSize() {
      return (this.slave_addrs == null) ? 0 : this.slave_addrs.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<String> getSlave_addrsIterator() {
      return (this.slave_addrs == null) ? null : this.slave_addrs.iterator();
    }

    public void addToSlave_addrs(String elem) {
      if (this.slave_addrs == null) {
        this.slave_addrs = new java.util.ArrayList<String>();
      }
      this.slave_addrs.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<String> getSlave_addrs() {
      return this.slave_addrs;
    }

    public upgrade_args setSlave_addrs(@org.apache.thrift.annotation.Nullable java.util.List<String> slave_addrs) {
      this.slave_addrs = slave_addrs;
      return this;
    }

    public void unsetSlave_addrs() {
      this.slave_addrs = null;
    }

    /** Returns true if field slave_addrs is set (has been assigned a value) and false otherwise */
    public boolean isSetSlave_addrs() {
      return this.slave_addrs != null;
    }

    public void setSlave_addrsIsSet(boolean value) {
      if (!value) {
        this.slave_addrs = null;
      }
    }

    public int getAid() {
      return this.aid;
    }

    public upgrade_args setAid(int aid) {
      this.aid = aid;
      setAidIsSet(true);
      return this;
    }

    public void unsetAid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AID_ISSET_ID);
    }

    /** Returns true if field aid is set (has been assigned a value) and false otherwise */
    public boolean isSetAid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AID_ISSET_ID);
    }

    public void setAidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case SLAVE_ADDRS:
        if (value == null) {
          unsetSlave_addrs();
        } else {
          setSlave_addrs((java.util.List<String>)value);
        }
        break;

      case AID:
        if (value == null) {
          unsetAid();
        } else {
          setAid((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case SLAVE_ADDRS:
        return getSlave_addrs();

      case AID:
        return getAid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case SLAVE_ADDRS:
        return isSetSlave_addrs();
      case AID:
        return isSetAid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof upgrade_args)
        return this.equals((upgrade_args)that);
      return false;
    }

    public boolean equals(upgrade_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_slave_addrs = true && this.isSetSlave_addrs();
      boolean that_present_slave_addrs = true && that.isSetSlave_addrs();
      if (this_present_slave_addrs || that_present_slave_addrs) {
        if (!(this_present_slave_addrs && that_present_slave_addrs))
          return false;
        if (!this.slave_addrs.equals(that.slave_addrs))
          return false;
      }

      boolean this_present_aid = true;
      boolean that_present_aid = true;
      if (this_present_aid || that_present_aid) {
        if (!(this_present_aid && that_present_aid))
          return false;
        if (this.aid != that.aid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetSlave_addrs()) ? 131071 : 524287);
      if (isSetSlave_addrs())
        hashCode = hashCode * 8191 + slave_addrs.hashCode();

      hashCode = hashCode * 8191 + aid;

      return hashCode;
    }

    @Override
    public int compareTo(upgrade_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetTable(), other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetSlave_addrs(), other.isSetSlave_addrs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSlave_addrs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slave_addrs, other.slave_addrs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetAid(), other.isSetAid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aid, other.aid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("upgrade_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("slave_addrs:");
      if (this.slave_addrs == null) {
        sb.append("null");
      } else {
        sb.append(this.slave_addrs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aid:");
      sb.append(this.aid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class upgrade_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public upgrade_argsStandardScheme getScheme() {
        return new upgrade_argsStandardScheme();
      }
    }

    private static class upgrade_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<upgrade_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, upgrade_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SLAVE_ADDRS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.slave_addrs = new java.util.ArrayList<String>(_list16.size);
                  @org.apache.thrift.annotation.Nullable String _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readString();
                    struct.slave_addrs.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSlave_addrsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.aid = iprot.readI32();
                struct.setAidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, upgrade_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.slave_addrs != null) {
          oprot.writeFieldBegin(SLAVE_ADDRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.slave_addrs.size()));
            for (String _iter19 : struct.slave_addrs)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AID_FIELD_DESC);
        oprot.writeI32(struct.aid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class upgrade_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public upgrade_argsTupleScheme getScheme() {
        return new upgrade_argsTupleScheme();
      }
    }

    private static class upgrade_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<upgrade_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, upgrade_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetSlave_addrs()) {
          optionals.set(1);
        }
        if (struct.isSetAid()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetSlave_addrs()) {
          {
            oprot.writeI32(struct.slave_addrs.size());
            for (String _iter20 : struct.slave_addrs)
            {
              oprot.writeString(_iter20);
            }
          }
        }
        if (struct.isSetAid()) {
          oprot.writeI32(struct.aid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, upgrade_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list21 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.slave_addrs = new java.util.ArrayList<String>(_list21.size);
            @org.apache.thrift.annotation.Nullable String _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readString();
              struct.slave_addrs.add(_elem22);
            }
          }
          struct.setSlave_addrsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.aid = iprot.readI32();
          struct.setAidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
