/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package api;
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2024-05-14")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class r2m {

  public interface Iface {

    public void createResp(int state, int aid) throws org.apache.thrift.TException;

    public void dropResp(int state, int aid) throws org.apache.thrift.TException;

    public void recoverResp(int state, int aid) throws org.apache.thrift.TException;

    public void upgradeResp(int state, int aid) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createResp(int state, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void dropResp(int state, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void recoverResp(int state, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void upgradeResp(int state, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public void createResp(int state, int aid) throws org.apache.thrift.TException
    {
      send_createResp(state, aid);
    }

    public void send_createResp(int state, int aid) throws org.apache.thrift.TException
    {
      createResp_args args = new createResp_args();
      args.setState(state);
      args.setAid(aid);
      sendBaseOneway("createResp", args);
    }

    @Override
    public void dropResp(int state, int aid) throws org.apache.thrift.TException
    {
      send_dropResp(state, aid);
    }

    public void send_dropResp(int state, int aid) throws org.apache.thrift.TException
    {
      dropResp_args args = new dropResp_args();
      args.setState(state);
      args.setAid(aid);
      sendBaseOneway("dropResp", args);
    }

    @Override
    public void recoverResp(int state, int aid) throws org.apache.thrift.TException
    {
      send_recoverResp(state, aid);
    }

    public void send_recoverResp(int state, int aid) throws org.apache.thrift.TException
    {
      recoverResp_args args = new recoverResp_args();
      args.setState(state);
      args.setAid(aid);
      sendBaseOneway("recoverResp", args);
    }

    @Override
    public void upgradeResp(int state, int aid) throws org.apache.thrift.TException
    {
      send_upgradeResp(state, aid);
    }

    public void send_upgradeResp(int state, int aid) throws org.apache.thrift.TException
    {
      upgradeResp_args args = new upgradeResp_args();
      args.setState(state);
      args.setAid(aid);
      sendBaseOneway("upgradeResp", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void createResp(int state, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createResp_call method_call = new createResp_call(state, aid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createResp_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int state;
      private int aid;
      public createResp_call(int state, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.state = state;
        this.aid = aid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createResp", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        createResp_args args = new createResp_args();
        args.setState(state);
        args.setAid(aid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void dropResp(int state, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dropResp_call method_call = new dropResp_call(state, aid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dropResp_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int state;
      private int aid;
      public dropResp_call(int state, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.state = state;
        this.aid = aid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dropResp", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        dropResp_args args = new dropResp_args();
        args.setState(state);
        args.setAid(aid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void recoverResp(int state, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recoverResp_call method_call = new recoverResp_call(state, aid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recoverResp_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int state;
      private int aid;
      public recoverResp_call(int state, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.state = state;
        this.aid = aid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recoverResp", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        recoverResp_args args = new recoverResp_args();
        args.setState(state);
        args.setAid(aid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void upgradeResp(int state, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      upgradeResp_call method_call = new upgradeResp_call(state, aid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class upgradeResp_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int state;
      private int aid;
      public upgradeResp_call(int state, int aid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.state = state;
        this.aid = aid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("upgradeResp", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        upgradeResp_args args = new upgradeResp_args();
        args.setState(state);
        args.setAid(aid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createResp", new createResp());
      processMap.put("dropResp", new dropResp());
      processMap.put("recoverResp", new recoverResp());
      processMap.put("upgradeResp", new upgradeResp());
      return processMap;
    }

    public static class createResp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createResp_args> {
      public createResp() {
        super("createResp");
      }

      @Override
      public createResp_args getEmptyArgsInstance() {
        return new createResp_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, createResp_args args) throws org.apache.thrift.TException {
        iface.createResp(args.state, args.aid);
        return null;
      }
    }

    public static class dropResp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dropResp_args> {
      public dropResp() {
        super("dropResp");
      }

      @Override
      public dropResp_args getEmptyArgsInstance() {
        return new dropResp_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, dropResp_args args) throws org.apache.thrift.TException {
        iface.dropResp(args.state, args.aid);
        return null;
      }
    }

    public static class recoverResp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recoverResp_args> {
      public recoverResp() {
        super("recoverResp");
      }

      @Override
      public recoverResp_args getEmptyArgsInstance() {
        return new recoverResp_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, recoverResp_args args) throws org.apache.thrift.TException {
        iface.recoverResp(args.state, args.aid);
        return null;
      }
    }

    public static class upgradeResp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, upgradeResp_args> {
      public upgradeResp() {
        super("upgradeResp");
      }

      @Override
      public upgradeResp_args getEmptyArgsInstance() {
        return new upgradeResp_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, upgradeResp_args args) throws org.apache.thrift.TException {
        iface.upgradeResp(args.state, args.aid);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createResp", new createResp());
      processMap.put("dropResp", new dropResp());
      processMap.put("recoverResp", new recoverResp());
      processMap.put("upgradeResp", new upgradeResp());
      return processMap;
    }

    public static class createResp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createResp_args, Void> {
      public createResp() {
        super("createResp");
      }

      @Override
      public createResp_args getEmptyArgsInstance() {
        return new createResp_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, createResp_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.createResp(args.state, args.aid,resultHandler);
      }
    }

    public static class dropResp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dropResp_args, Void> {
      public dropResp() {
        super("dropResp");
      }

      @Override
      public dropResp_args getEmptyArgsInstance() {
        return new dropResp_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, dropResp_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.dropResp(args.state, args.aid,resultHandler);
      }
    }

    public static class recoverResp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recoverResp_args, Void> {
      public recoverResp() {
        super("recoverResp");
      }

      @Override
      public recoverResp_args getEmptyArgsInstance() {
        return new recoverResp_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, recoverResp_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.recoverResp(args.state, args.aid,resultHandler);
      }
    }

    public static class upgradeResp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, upgradeResp_args, Void> {
      public upgradeResp() {
        super("upgradeResp");
      }

      @Override
      public upgradeResp_args getEmptyArgsInstance() {
        return new upgradeResp_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, upgradeResp_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.upgradeResp(args.state, args.aid,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class createResp_args implements org.apache.thrift.TBase<createResp_args, createResp_args._Fields>, java.io.Serializable, Cloneable, Comparable<createResp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createResp_args");

    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField AID_FIELD_DESC = new org.apache.thrift.protocol.TField("aid", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createResp_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createResp_argsTupleSchemeFactory();

    public int state; // required
    public int aid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATE((short)1, "state"),
      AID((short)2, "aid");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATE
            return STATE;
          case 2: // AID
            return AID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private static final int __AID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AID, new org.apache.thrift.meta_data.FieldMetaData("aid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createResp_args.class, metaDataMap);
    }

    public createResp_args() {
    }

    public createResp_args(
      int state,
      int aid)
    {
      this();
      this.state = state;
      setStateIsSet(true);
      this.aid = aid;
      setAidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createResp_args(createResp_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.state = other.state;
      this.aid = other.aid;
    }

    @Override
    public createResp_args deepCopy() {
      return new createResp_args(this);
    }

    @Override
    public void clear() {
      setStateIsSet(false);
      this.state = 0;
      setAidIsSet(false);
      this.aid = 0;
    }

    public int getState() {
      return this.state;
    }

    public createResp_args setState(int state) {
      this.state = state;
      setStateIsSet(true);
      return this;
    }

    public void unsetState() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    public void setStateIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
    }

    public int getAid() {
      return this.aid;
    }

    public createResp_args setAid(int aid) {
      this.aid = aid;
      setAidIsSet(true);
      return this;
    }

    public void unsetAid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AID_ISSET_ID);
    }

    /** Returns true if field aid is set (has been assigned a value) and false otherwise */
    public boolean isSetAid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AID_ISSET_ID);
    }

    public void setAidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((Integer)value);
        }
        break;

      case AID:
        if (value == null) {
          unsetAid();
        } else {
          setAid((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATE:
        return getState();

      case AID:
        return getAid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATE:
        return isSetState();
      case AID:
        return isSetAid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof createResp_args)
        return this.equals((createResp_args)that);
      return false;
    }

    public boolean equals(createResp_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      boolean this_present_aid = true;
      boolean that_present_aid = true;
      if (this_present_aid || that_present_aid) {
        if (!(this_present_aid && that_present_aid))
          return false;
        if (this.aid != that.aid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + state;

      hashCode = hashCode * 8191 + aid;

      return hashCode;
    }

    @Override
    public int compareTo(createResp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetState(), other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetAid(), other.isSetAid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aid, other.aid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createResp_args(");
      boolean first = true;

      sb.append("state:");
      sb.append(this.state);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aid:");
      sb.append(this.aid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createResp_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public createResp_argsStandardScheme getScheme() {
        return new createResp_argsStandardScheme();
      }
    }

    private static class createResp_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createResp_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, createResp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.state = iprot.readI32();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.aid = iprot.readI32();
                struct.setAidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, createResp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AID_FIELD_DESC);
        oprot.writeI32(struct.aid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createResp_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public createResp_argsTupleScheme getScheme() {
        return new createResp_argsTupleScheme();
      }
    }

    private static class createResp_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createResp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createResp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetState()) {
          optionals.set(0);
        }
        if (struct.isSetAid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetState()) {
          oprot.writeI32(struct.state);
        }
        if (struct.isSetAid()) {
          oprot.writeI32(struct.aid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createResp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.state = iprot.readI32();
          struct.setStateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aid = iprot.readI32();
          struct.setAidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class dropResp_args implements org.apache.thrift.TBase<dropResp_args, dropResp_args._Fields>, java.io.Serializable, Cloneable, Comparable<dropResp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dropResp_args");

    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField AID_FIELD_DESC = new org.apache.thrift.protocol.TField("aid", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dropResp_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dropResp_argsTupleSchemeFactory();

    public int state; // required
    public int aid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATE((short)1, "state"),
      AID((short)2, "aid");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATE
            return STATE;
          case 2: // AID
            return AID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private static final int __AID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AID, new org.apache.thrift.meta_data.FieldMetaData("aid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dropResp_args.class, metaDataMap);
    }

    public dropResp_args() {
    }

    public dropResp_args(
      int state,
      int aid)
    {
      this();
      this.state = state;
      setStateIsSet(true);
      this.aid = aid;
      setAidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dropResp_args(dropResp_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.state = other.state;
      this.aid = other.aid;
    }

    @Override
    public dropResp_args deepCopy() {
      return new dropResp_args(this);
    }

    @Override
    public void clear() {
      setStateIsSet(false);
      this.state = 0;
      setAidIsSet(false);
      this.aid = 0;
    }

    public int getState() {
      return this.state;
    }

    public dropResp_args setState(int state) {
      this.state = state;
      setStateIsSet(true);
      return this;
    }

    public void unsetState() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    public void setStateIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
    }

    public int getAid() {
      return this.aid;
    }

    public dropResp_args setAid(int aid) {
      this.aid = aid;
      setAidIsSet(true);
      return this;
    }

    public void unsetAid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AID_ISSET_ID);
    }

    /** Returns true if field aid is set (has been assigned a value) and false otherwise */
    public boolean isSetAid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AID_ISSET_ID);
    }

    public void setAidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((Integer)value);
        }
        break;

      case AID:
        if (value == null) {
          unsetAid();
        } else {
          setAid((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATE:
        return getState();

      case AID:
        return getAid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATE:
        return isSetState();
      case AID:
        return isSetAid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof dropResp_args)
        return this.equals((dropResp_args)that);
      return false;
    }

    public boolean equals(dropResp_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      boolean this_present_aid = true;
      boolean that_present_aid = true;
      if (this_present_aid || that_present_aid) {
        if (!(this_present_aid && that_present_aid))
          return false;
        if (this.aid != that.aid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + state;

      hashCode = hashCode * 8191 + aid;

      return hashCode;
    }

    @Override
    public int compareTo(dropResp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetState(), other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetAid(), other.isSetAid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aid, other.aid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dropResp_args(");
      boolean first = true;

      sb.append("state:");
      sb.append(this.state);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aid:");
      sb.append(this.aid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dropResp_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public dropResp_argsStandardScheme getScheme() {
        return new dropResp_argsStandardScheme();
      }
    }

    private static class dropResp_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<dropResp_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, dropResp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.state = iprot.readI32();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.aid = iprot.readI32();
                struct.setAidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, dropResp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AID_FIELD_DESC);
        oprot.writeI32(struct.aid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dropResp_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public dropResp_argsTupleScheme getScheme() {
        return new dropResp_argsTupleScheme();
      }
    }

    private static class dropResp_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<dropResp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dropResp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetState()) {
          optionals.set(0);
        }
        if (struct.isSetAid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetState()) {
          oprot.writeI32(struct.state);
        }
        if (struct.isSetAid()) {
          oprot.writeI32(struct.aid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dropResp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.state = iprot.readI32();
          struct.setStateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aid = iprot.readI32();
          struct.setAidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class recoverResp_args implements org.apache.thrift.TBase<recoverResp_args, recoverResp_args._Fields>, java.io.Serializable, Cloneable, Comparable<recoverResp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recoverResp_args");

    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField AID_FIELD_DESC = new org.apache.thrift.protocol.TField("aid", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recoverResp_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recoverResp_argsTupleSchemeFactory();

    public int state; // required
    public int aid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATE((short)1, "state"),
      AID((short)2, "aid");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATE
            return STATE;
          case 2: // AID
            return AID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private static final int __AID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AID, new org.apache.thrift.meta_data.FieldMetaData("aid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recoverResp_args.class, metaDataMap);
    }

    public recoverResp_args() {
    }

    public recoverResp_args(
      int state,
      int aid)
    {
      this();
      this.state = state;
      setStateIsSet(true);
      this.aid = aid;
      setAidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recoverResp_args(recoverResp_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.state = other.state;
      this.aid = other.aid;
    }

    @Override
    public recoverResp_args deepCopy() {
      return new recoverResp_args(this);
    }

    @Override
    public void clear() {
      setStateIsSet(false);
      this.state = 0;
      setAidIsSet(false);
      this.aid = 0;
    }

    public int getState() {
      return this.state;
    }

    public recoverResp_args setState(int state) {
      this.state = state;
      setStateIsSet(true);
      return this;
    }

    public void unsetState() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    public void setStateIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
    }

    public int getAid() {
      return this.aid;
    }

    public recoverResp_args setAid(int aid) {
      this.aid = aid;
      setAidIsSet(true);
      return this;
    }

    public void unsetAid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AID_ISSET_ID);
    }

    /** Returns true if field aid is set (has been assigned a value) and false otherwise */
    public boolean isSetAid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AID_ISSET_ID);
    }

    public void setAidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((Integer)value);
        }
        break;

      case AID:
        if (value == null) {
          unsetAid();
        } else {
          setAid((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATE:
        return getState();

      case AID:
        return getAid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATE:
        return isSetState();
      case AID:
        return isSetAid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof recoverResp_args)
        return this.equals((recoverResp_args)that);
      return false;
    }

    public boolean equals(recoverResp_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      boolean this_present_aid = true;
      boolean that_present_aid = true;
      if (this_present_aid || that_present_aid) {
        if (!(this_present_aid && that_present_aid))
          return false;
        if (this.aid != that.aid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + state;

      hashCode = hashCode * 8191 + aid;

      return hashCode;
    }

    @Override
    public int compareTo(recoverResp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetState(), other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetAid(), other.isSetAid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aid, other.aid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recoverResp_args(");
      boolean first = true;

      sb.append("state:");
      sb.append(this.state);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aid:");
      sb.append(this.aid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recoverResp_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public recoverResp_argsStandardScheme getScheme() {
        return new recoverResp_argsStandardScheme();
      }
    }

    private static class recoverResp_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<recoverResp_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, recoverResp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.state = iprot.readI32();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.aid = iprot.readI32();
                struct.setAidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, recoverResp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AID_FIELD_DESC);
        oprot.writeI32(struct.aid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recoverResp_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public recoverResp_argsTupleScheme getScheme() {
        return new recoverResp_argsTupleScheme();
      }
    }

    private static class recoverResp_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<recoverResp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recoverResp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetState()) {
          optionals.set(0);
        }
        if (struct.isSetAid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetState()) {
          oprot.writeI32(struct.state);
        }
        if (struct.isSetAid()) {
          oprot.writeI32(struct.aid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recoverResp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.state = iprot.readI32();
          struct.setStateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aid = iprot.readI32();
          struct.setAidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class upgradeResp_args implements org.apache.thrift.TBase<upgradeResp_args, upgradeResp_args._Fields>, java.io.Serializable, Cloneable, Comparable<upgradeResp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("upgradeResp_args");

    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField AID_FIELD_DESC = new org.apache.thrift.protocol.TField("aid", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new upgradeResp_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new upgradeResp_argsTupleSchemeFactory();

    public int state; // required
    public int aid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATE((short)1, "state"),
      AID((short)2, "aid");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATE
            return STATE;
          case 2: // AID
            return AID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private static final int __AID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AID, new org.apache.thrift.meta_data.FieldMetaData("aid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upgradeResp_args.class, metaDataMap);
    }

    public upgradeResp_args() {
    }

    public upgradeResp_args(
      int state,
      int aid)
    {
      this();
      this.state = state;
      setStateIsSet(true);
      this.aid = aid;
      setAidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public upgradeResp_args(upgradeResp_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.state = other.state;
      this.aid = other.aid;
    }

    @Override
    public upgradeResp_args deepCopy() {
      return new upgradeResp_args(this);
    }

    @Override
    public void clear() {
      setStateIsSet(false);
      this.state = 0;
      setAidIsSet(false);
      this.aid = 0;
    }

    public int getState() {
      return this.state;
    }

    public upgradeResp_args setState(int state) {
      this.state = state;
      setStateIsSet(true);
      return this;
    }

    public void unsetState() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    public void setStateIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
    }

    public int getAid() {
      return this.aid;
    }

    public upgradeResp_args setAid(int aid) {
      this.aid = aid;
      setAidIsSet(true);
      return this;
    }

    public void unsetAid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AID_ISSET_ID);
    }

    /** Returns true if field aid is set (has been assigned a value) and false otherwise */
    public boolean isSetAid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AID_ISSET_ID);
    }

    public void setAidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((Integer)value);
        }
        break;

      case AID:
        if (value == null) {
          unsetAid();
        } else {
          setAid((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATE:
        return getState();

      case AID:
        return getAid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATE:
        return isSetState();
      case AID:
        return isSetAid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof upgradeResp_args)
        return this.equals((upgradeResp_args)that);
      return false;
    }

    public boolean equals(upgradeResp_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      boolean this_present_aid = true;
      boolean that_present_aid = true;
      if (this_present_aid || that_present_aid) {
        if (!(this_present_aid && that_present_aid))
          return false;
        if (this.aid != that.aid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + state;

      hashCode = hashCode * 8191 + aid;

      return hashCode;
    }

    @Override
    public int compareTo(upgradeResp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetState(), other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetAid(), other.isSetAid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aid, other.aid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("upgradeResp_args(");
      boolean first = true;

      sb.append("state:");
      sb.append(this.state);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aid:");
      sb.append(this.aid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class upgradeResp_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public upgradeResp_argsStandardScheme getScheme() {
        return new upgradeResp_argsStandardScheme();
      }
    }

    private static class upgradeResp_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<upgradeResp_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, upgradeResp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.state = iprot.readI32();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.aid = iprot.readI32();
                struct.setAidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, upgradeResp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AID_FIELD_DESC);
        oprot.writeI32(struct.aid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class upgradeResp_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public upgradeResp_argsTupleScheme getScheme() {
        return new upgradeResp_argsTupleScheme();
      }
    }

    private static class upgradeResp_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<upgradeResp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, upgradeResp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetState()) {
          optionals.set(0);
        }
        if (struct.isSetAid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetState()) {
          oprot.writeI32(struct.state);
        }
        if (struct.isSetAid()) {
          oprot.writeI32(struct.aid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, upgradeResp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.state = iprot.readI32();
          struct.setStateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aid = iprot.readI32();
          struct.setAidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
